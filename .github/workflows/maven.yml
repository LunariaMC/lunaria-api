# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        java-version: '8'
        distribution: 'temurin'
        cache: maven

    - name: Build with Maven
      run: mvn clean install
    - name: Get Version from POM
      run: echo "::set-output name=version::$(mvn -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec)"
      id: version
    - name: Get Short SHA
      run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      id: sha
    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      with:
        draft: false
        prerelease: false
        release_name: ${{ steps.version.outputs.version }}.${{ steps.sha.outputs.sha_short }}
        tag_name: "prod"
        body: "lunaria build"
      env:
        GITHUB_TOKEN: ${{ github.token }}
    - name: Upload Java File
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: "target/lunaria-api-${{ steps.version.outputs.version }}.jar"
        asset_name: lunaria-api-${{ steps.version.outputs.version }}.jar
        asset_content_type: application/java-archive
